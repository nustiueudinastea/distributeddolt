// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/filedownloader.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileDownloader_Download_FullMethodName = "/proto.FileDownloader/Download"
)

// FileDownloaderClient is the client API for FileDownloader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileDownloaderClient interface {
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileDownloader_DownloadClient, error)
}

type fileDownloaderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileDownloaderClient(cc grpc.ClientConnInterface) FileDownloaderClient {
	return &fileDownloaderClient{cc}
}

func (c *fileDownloaderClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileDownloader_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileDownloader_ServiceDesc.Streams[0], FileDownloader_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileDownloaderDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileDownloader_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type fileDownloaderDownloadClient struct {
	grpc.ClientStream
}

func (x *fileDownloaderDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileDownloaderServer is the server API for FileDownloader service.
// All implementations should embed UnimplementedFileDownloaderServer
// for forward compatibility
type FileDownloaderServer interface {
	Download(*DownloadRequest, FileDownloader_DownloadServer) error
}

// UnimplementedFileDownloaderServer should be embedded to have forward compatible implementations.
type UnimplementedFileDownloaderServer struct {
}

func (UnimplementedFileDownloaderServer) Download(*DownloadRequest, FileDownloader_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

// UnsafeFileDownloaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileDownloaderServer will
// result in compilation errors.
type UnsafeFileDownloaderServer interface {
	mustEmbedUnimplementedFileDownloaderServer()
}

func RegisterFileDownloaderServer(s grpc.ServiceRegistrar, srv FileDownloaderServer) {
	s.RegisterService(&FileDownloader_ServiceDesc, srv)
}

func _FileDownloader_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileDownloaderServer).Download(m, &fileDownloaderDownloadServer{stream})
}

type FileDownloader_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type fileDownloaderDownloadServer struct {
	grpc.ServerStream
}

func (x *fileDownloaderDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileDownloader_ServiceDesc is the grpc.ServiceDesc for FileDownloader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileDownloader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileDownloader",
	HandlerType: (*FileDownloaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _FileDownloader_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/filedownloader.proto",
}
